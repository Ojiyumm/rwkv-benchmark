# Code SFT data preparation script

processors_to_run: all

preprocessed_dataset_files: null  # can specify multiple patters separated by space
input_files: null  # can specify datasets from HF instead of prediction_jsonl_files
output_path: ???

exclude_optional_keys: true # exclude keys other than input, output and expected_answer from the final manifest
metadata: null  # can provide additional metadata to store (e.g. dataset or generation_type)
skip_first: 0  # useful for skipping validation set from train_full generation (it's always first)

random_seed: 42
do_shuffle: true

prompt_config: null
# Needed to format the data and also for length-based filtering
tokenizer: null
chat_template_kwargs: null
system_message: null  # can be used to override default from the tokenizer
assistant_end: null  # can be used to not use jinja and just add this suffix

code_tags: null

# input params
min_input_length: null
max_input_length: null

# output params
min_output_length: null
max_output_length: null
use_chars_for_min_length: false

input_key: input  # key to group samples by before code_text_filter
output_key: output  # key to filter solutions by

filters:
  drop_incorrect_code_blocks: false
  remove_len_outlier_inputs: false
  remove_len_outlier_outputs: false

processors:
  - _target_: nemo_skills.training.data_preparation_utils.preprocessing.ReadData
    preprocessed_dataset_files: ${preprocessed_dataset_files}
    input_files: ${input_files}
    input_key: ${input_key}
    output_key: ${output_key}
    skip_first: ${skip_first}

  - _target_: nemo_skills.training.data_preparation_utils.filters.DropIncorrectCodeBlocks
    should_run: ${filters.drop_incorrect_code_blocks}
    output_key: ${output_key}
    test_cases:
      - { input: { output: "Solution ```python\ndef hello()``` Second code ```python\n" }, output: null }
      - { input: { output: "Solution ```python\ndef hello()```" }, output: { output: "Solution ```python\ndef hello()```" } }
      - { input: { output: "She had python\ndef hello()```" }, output: null }

  - _target_: nemo_skills.training.data_preparation_utils.filters.RemoveLenOutliers
    should_run: ${filters.remove_len_outlier_inputs}
    property_key: ${input_key}
    min_length: ${min_input_length}
    max_length: ${max_input_length}
    tokenizer: ${tokenizer}

  - _target_: nemo_skills.training.data_preparation_utils.filters.RemoveLenOutliers
    should_run: ${filters.remove_len_outlier_outputs}
    property_key: ${output_key}
    min_length: ${min_output_length}
    max_length: ${max_output_length}
    tokenizer: ${tokenizer}
    use_chars_for_min_length: ${use_chars_for_min_length}

  - _target_: nemo_skills.training.data_preparation_utils.preprocessing.GroupSamples
    group_key: ${input_key}

  - _target_: nemo_skills.training.data_preparation_utils.preprocessing.ShuffleAndDownsampleData
    random_seed: ${random_seed}
    do_shuffle: ${do_shuffle}

  - _target_: sdp.processors.RenameFields
    rename_fields:
      input: question  # we need to match llama3/codegen_sft format which uses 'question' as input key

  - _target_: nemo_skills.training.data_preparation_utils.preprocessing.WriteFinalSftManifest
    output_manifest_file: ${output_path}
    prompt_config: ${prompt_config}
    tokenizer: ${tokenizer}
    chat_template_kwargs: ${chat_template_kwargs}
    system_message: ${system_message}
    assistant_end: ${assistant_end}
    code_tags: ${code_tags}
    input_key: question
    output_key: ${output_key}
    metadata: ${metadata}
